const { Client, GatewayIntentBits, SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
require('dotenv').config();

const cooldowns = new Map();
const cooldownTimers = new Map();
const warningTimers = new Map();
const messageCache = new Map();
const channelCache = new Map();

const MAX_CACHE_SIZE = 100;
const CACHE_CLEANUP_INTERVAL = 300000;
const MAX_COOLDOWN_DURATION = 7200000;

const dateFormatter = new Intl.DateTimeFormat('th-TH', {
    timeZone: 'Asia/Bangkok',
    hour: '2-digit',
    minute: '2-digit',
    hour12: false
});

const shops = Object.freeze([
    '‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢',
    '‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏Å‡πà'
]);
const shopChoices = shops.map(shop => ({ name: shop, value: shop }));

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
    ],
    allowedMentions: { parse: [] },
    partials: [],
    makeCache: (manager) => {
        if (manager.name === 'GuildManager') return new Map();
        if (manager.name === 'ChannelManager') return new Map();
        if (manager.name === 'MessageManager') return new Map();
        return new Map();
    }
});

client.once('ready', async () => {
    console.log(`‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ${client.user.tag}`);
    const commands = [
        new SlashCommandBuilder()
            .setName('cooldown')
            .setDescription('‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏£‡πâ‡∏≤‡∏ô')
            .addStringOption(option =>
                option.setName('shop')
                    .setDescription('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô')
                    .setRequired(true)
                    .addChoices(...shopChoices))
            .addIntegerOption(option =>
                option.setName('minutes')
                    .setDescription('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ (1-120)')
                    .setRequired(true)
                    .setMinValue(1)
                    .setMaxValue(120)),
        new SlashCommandBuilder()
            .setName('check_cooldown')
            .setDescription('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏£‡πâ‡∏≤‡∏ô'),
        new SlashCommandBuilder()
            .setName('cancel_cooldown')
            .setDescription('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')
            .addStringOption(option =>
                option.setName('shop')
                    .setDescription('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
                    .setRequired(true)
                    .addChoices(...shopChoices)),
        new SlashCommandBuilder()
            .setName('sync')
            .setDescription('‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö Slash (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)'),
        new SlashCommandBuilder()
            .setName('check_permissions')
            .setDescription('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ')
    ];
    try {
        console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (/) ');
        await client.application.commands.set(commands);
        console.log('‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (/) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:', error);
    }
});

function formatTimeRemaining(endTime) {
    const remaining = endTime - Date.now();
    if (remaining <= 0) return '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß';
    const minutes = Math.floor(remaining / 60000);
    const seconds = Math.floor((remaining % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, '0')} ‡∏ô‡∏≤‡∏ó‡∏µ`;
}

function createCooldownEmbed(shop, minutes, endTime, username) {
    const thailandTime = new Date(endTime);
    const timeString = dateFormatter.format(thailandTime);
    return new EmbedBuilder()
        .setColor(0xff9500)
        .setTitle(`üïê ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô${shop}`)
        .setDescription('**‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå**')
        .addFields(
            { name: '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á', value: `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`, inline: false },
            { name: '‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤', value: formatTimeRemaining(endTime), inline: false },
            { name: '‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠', value: `${timeString} (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)`, inline: false }
        )
        .setTimestamp()
        .setFooter({ text: `‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢ ${username}` });
}

function cleanupCooldown(shop) {
    cooldowns.delete(shop);
    if (cooldownTimers.has(shop)) {
        clearTimeout(cooldownTimers.get(shop));
        cooldownTimers.delete(shop);
    }
    if (warningTimers.has(shop)) {
        clearTimeout(warningTimers.get(shop));
        warningTimers.delete(shop);
    }
    const cooldownData = cooldowns.get(shop);
    if (cooldownData) {
        const messageKey = `${cooldownData.channelId}-${cooldownData.messageId}`;
        messageCache.delete(messageKey);
    }
}

function cleanupCaches() {
    if (messageCache.size > MAX_CACHE_SIZE) {
        const entries = Array.from(messageCache.entries());
        const keepEntries = entries.slice(-Math.floor(MAX_CACHE_SIZE / 2));
        messageCache.clear();
        keepEntries.forEach(([key, value]) => messageCache.set(key, value));
    }
    if (channelCache.size > MAX_CACHE_SIZE) {
        const entries = Array.from(channelCache.entries());
        const keepEntries = entries.slice(-Math.floor(MAX_CACHE_SIZE / 2));
        channelCache.clear();
        keepEntries.forEach(([key, value]) => channelCache.set(key, value));
    }
    console.log(`Cache cleanup: Messages=${messageCache.size}, Channels=${channelCache.size}, Cooldowns=${cooldowns.size}`);
}

function forceGarbageCollection() {
    if (global.gc) {
        global.gc();
        console.log('Manual garbage collection triggered');
    }
}

async function getCachedChannel(channelId) {
    if (channelCache.has(channelId)) {
        return channelCache.get(channelId);
    }
    try {
        const channel = await client.channels.fetch(channelId);
        channelCache.set(channelId, channel);
        if (channelCache.size > MAX_CACHE_SIZE) {
            const firstKey = channelCache.keys().next().value;
            channelCache.delete(firstKey);
        }
        return channel;
    } catch (error) {
        return null;
    }
}

async function getCachedMessage(channel, messageId) {
    const cacheKey = `${channel.id}-${messageId}`;
    if (messageCache.has(cacheKey)) {
        return messageCache.get(cacheKey);
    }
    try {
        const message = await channel.messages.fetch(messageId);
        messageCache.set(cacheKey, message);
        if (messageCache.size > MAX_CACHE_SIZE) {
            const firstKey = messageCache.keys().next().value;
            messageCache.delete(firstKey);
        }
        return message;
    } catch (error) {
        return null;
    }
}

async function handleCooldownCompletion(shop, channelId, messageId) {
    try {
        const channel = await getCachedChannel(channelId);
        if (!channel) {
            cleanupCooldown(shop);
            return;
        }
        const message = await getCachedMessage(channel, messageId);
        if (!message) {
            cleanupCooldown(shop);
            return;
        }
        const completionMessage = await channel.send(`üîî **${shop}** ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!`);
        const cleanupPromises = [
            new Promise(resolve => setTimeout(async () => {
                try { await message.delete(); } catch {}
                resolve();
            }, 5000)),
            new Promise(resolve => setTimeout(async () => {
                try { await completionMessage.delete(); } catch {}
                resolve();
            }, 10000))
        ];
        cleanupCooldown(shop);
        Promise.allSettled(cleanupPromises);
    } catch (error) {
        if (error.code === 50001 || error.code === 10008 || error.code === 10003) {
            console.log(`‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå ${shop} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ (completion)`);
        } else {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:', error);
        }
        cleanupCooldown(shop);
    }
}

async function handle5MinuteWarning(shop, channelId) {
    try {
        const channel = await getCachedChannel(channelId);
        if (!channel) return;
        const warningMessage = await channel.send(`‚ö†Ô∏è **${shop}** ‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ!`);
        setTimeout(async () => {
            try { await warningMessage.delete(); } catch {}
        }, 300000);
    } catch (error) {
        if (error.code === 50001 || error.code === 10008 || error.code === 10003) {
            console.log(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${shop} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ`);
        } else {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ:', error);
        }
    }
}

client.on('interactionCreate', async (interaction) => {
    if (!interaction.isChatInputCommand()) return;
    const { commandName } = interaction;
    try {
        if (commandName === 'cooldown') {
            const shop = interaction.options.getString('shop');
            const minutes = interaction.options.getInteger('minutes');
            const startTime = Date.now();
            const endTime = startTime + (minutes * 60 * 1000);
            if (minutes * 60 * 1000 > MAX_COOLDOWN_DURATION) {
                await interaction.reply({
                    content: `‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠ ${MAX_COOLDOWN_DURATION / 60000} ‡∏ô‡∏≤‡∏ó‡∏µ`,
                    flags: 64
                });
                return;
            }
            if (cooldowns.has(shop)) {
                await interaction.reply({
                    content: `‚ùå **${shop}** ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡πÉ‡∏ä‡πâ \`/cancel_cooldown\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å`,
                    flags: 64
                });
                return;
            }
            const embed = createCooldownEmbed(shop, minutes, endTime, interaction.user.username);
            const response = await interaction.reply({ embeds: [embed] });
            const message = await interaction.fetchReply();
            cooldowns.set(shop, {
                startTime,
                endTime,
                originalMinutes: minutes,
                channelId: interaction.channelId,
                messageId: message.id,
                userId: interaction.user.id,
                username: interaction.user.username
            });
            const completionTimer = setTimeout(() => {
                handleCooldownCompletion(shop, interaction.channelId, message.id);
            }, minutes * 60 * 1000);
            cooldownTimers.set(shop, completionTimer);
            if (minutes > 5) {
                const warningTimer = setTimeout(() => {
                    handle5MinuteWarning(shop, interaction.channelId);
                }, (minutes - 5) * 60 * 1000);
                warningTimers.set(shop, warningTimer);
            }
        } else if (commandName === 'check_cooldown') {
            const embed = new EmbedBuilder()
                .setColor(0x0099ff)
                .setTitle('üè™ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ó‡∏∏‡∏Å‡∏£‡πâ‡∏≤‡∏ô')
                .setTimestamp();
            let description = '';
            let hasActiveCooldowns = false;
            for (const shop of shops) {
                if (cooldowns.has(shop)) {
                    const cooldownData = cooldowns.get(shop);
                    const timeLeft = formatTimeRemaining(cooldownData.endTime);
                    description += `üî¥ **${shop}**: ${timeLeft}\n`;
                    hasActiveCooldowns = true;
                } else {
                    description += `üü¢ **${shop}**: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n`;
                }
            }
            if (!hasActiveCooldowns) {
                embed.setColor(0x00ff00);
                embed.setDescription('üéâ ‡∏ó‡∏∏‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
            } else {
                embed.setDescription(description);
            }
            await interaction.reply({ embeds: [embed] });
        } else if (commandName === 'cancel_cooldown') {
            const shop = interaction.options.getString('shop');
            if (!cooldowns.has(shop)) {
                await interaction.reply({
                    content: `‚ùå **${shop}** ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å`,
                    flags: 64
                });
                return;
            }
            const cooldownData = cooldowns.get(shop);
            if (cooldownTimers.has(shop)) {
                clearTimeout(cooldownTimers.get(shop));
                cooldownTimers.delete(shop);
            }
            if (warningTimers.has(shop)) {
                clearTimeout(warningTimers.get(shop));
                warningTimers.delete(shop);
            }
            try {
                const channel = await getCachedChannel(cooldownData.channelId);
                const message = channel ? await getCachedMessage(channel, cooldownData.messageId) : null;
                if (message) {
                    const cancelledEmbed = new EmbedBuilder()
                        .setColor(0xff0000)
                        .setTitle('‚ùå ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
                        .setDescription(`**${shop}** ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`)
                        .setTimestamp()
                        .setFooter({ text: `‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢ ${interaction.user.username}` });
                    await message.edit({ embeds: [cancelledEmbed] });
                }
            } catch (error) {
                if (error.code === 50001 || error.code === 10008 || error.code === 10003) {
                    console.log(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${shop} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ`);
                } else {
                    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:', error);
                }
            }
            cooldowns.delete(shop);
            await interaction.reply({
                content: `‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå **${shop}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
                flags: 64
            });
        } else if (commandName === 'sync') {
            if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                await interaction.reply({
                    content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Administrator)',
                    flags: 64
                });
                return;
            }
            await interaction.deferReply({ flags: 64 });
            try {
                const commands = [
                    new SlashCommandBuilder()
                        .setName('cooldown')
                        .setDescription('‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏£‡πâ‡∏≤‡∏ô')
                        .addStringOption(option =>
                            option.setName('shop')
                                .setDescription('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô')
                                .setRequired(true)
                                .addChoices(...shops.map(shop => ({ name: shop, value: shop }))))
                        .addIntegerOption(option =>
                            option.setName('minutes')
                                .setDescription('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ (1-120)')
                                .setRequired(true)
                                .setMinValue(1)
                                .setMaxValue(120)),
                    new SlashCommandBuilder()
                        .setName('check_cooldown')
                        .setDescription('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏£‡πâ‡∏≤‡∏ô'),
                    new SlashCommandBuilder()
                        .setName('cancel_cooldown')
                        .setDescription('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')
                        .addStringOption(option =>
                            option.setName('shop')
                                .setDescription('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
                                .setRequired(true)
                                .addChoices(...shops.map(shop => ({ name: shop, value: shop })))),
                    new SlashCommandBuilder()
                        .setName('sync')
                        .setDescription('‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö Slash (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)'),
                    new SlashCommandBuilder()
                        .setName('check_permissions')
                        .setDescription('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ')
                ];
                await client.application.commands.set(commands);
                await interaction.editReply('‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö Slash ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
            } catch (error) {
                console.error('Error syncing commands:', error);
                await interaction.editReply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á');
            }
        } else if (commandName === 'check_permissions') {
            if (!interaction.guild) {
                await interaction.reply({
                    content: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
                    flags: 64
                });
                return;
            }
            const botMember = interaction.guild.members.cache.get(client.user.id);
            if (!botMember) {
                await interaction.reply({
                    content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ',
                    flags: 64
                });
                return;
            }
            const channel = interaction.channel;
            const requiredPermissions = [
                { name: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', flag: PermissionFlagsBits.SendMessages },
                { name: '‡πÅ‡∏ô‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå', flag: PermissionFlagsBits.EmbedLinks },
                { name: '‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö Slash', flag: PermissionFlagsBits.UseApplicationCommands },
                { name: '‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', flag: PermissionFlagsBits.ReadMessageHistory },
                { name: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏µ‡πÅ‡∏≠‡∏Ñ‡∏ä‡∏±‡πà‡∏ô', flag: PermissionFlagsBits.AddReactions }
            ];
            let permissionStatus = '';
            let missingPermissions = [];
            for (const perm of requiredPermissions) {
                const hasPermission = botMember.permissionsIn(channel).has(perm.flag);
                if (hasPermission) {
                    permissionStatus += `‚úÖ ${perm.name}\n`;
                } else {
                    permissionStatus += `‚ùå ${perm.name}\n`;
                    missingPermissions.push(perm.name);
                }
            }
            const embed = new EmbedBuilder()
                .setColor(missingPermissions.length > 0 ? 0xff0000 : 0x00ff00)
                .setTitle('üîê ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ö‡∏≠‡∏ó')
                .setDescription(permissionStatus)
                .setTimestamp();
            if (missingPermissions.length > 0) {
                embed.addFields({
                    name: '‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
                    value: '‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô Server ‡πÑ‡∏õ‡∏ó‡∏µ‡πà ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå > ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó > ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó > ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î'
                });
            } else {
                embed.addFields({
                    name: 'üéâ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
                    value: '‡∏ö‡∏≠‡∏ó‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß!'
                });
            }
            await interaction.reply({ embeds: [embed] });
        }
    } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash:', error);
        const errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
        if (interaction.deferred || interaction.replied) {
            await interaction.editReply({ content: errorMessage });
        } else {
            await interaction.reply({ content: errorMessage, flags: 64 });
        }
    }
});

setInterval(async () => {
    if (cooldowns.size === 0) return;
    const currentTime = Date.now();
    const expiredShops = [];
    const updatePromises = [];
    for (const [shop, cooldownData] of cooldowns.entries()) {
        const timeLeft = cooldownData.endTime - currentTime;
        if (timeLeft <= 0) {
            expiredShops.push(shop);
            continue;
        }
        updatePromises.push(
            (async () => {
                try {
                    const channel = await getCachedChannel(cooldownData.channelId);
                    if (!channel) {
                        expiredShops.push(shop);
                        return;
                    }
                    const message = await getCachedMessage(channel, cooldownData.messageId);
                    if (!message) {
                        expiredShops.push(shop);
                        return;
                    }
                    const embed = createCooldownEmbed(shop, cooldownData.originalMinutes, cooldownData.endTime, cooldownData.username);
                    await message.edit({ embeds: [embed] });
                } catch (error) {
                    if (error.code === 50001 || error.code === 10008 || error.code === 10003) {
                        expiredShops.push(shop);
                    } else {
                        console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${shop}:`, error);
                    }
                }
            })()
        );
    }
    await Promise.allSettled(updatePromises);
    for (const shop of expiredShops) {
        console.log(`‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå ${shop} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ`);
        cleanupCooldown(shop);
    }
}, 5000);

setInterval(() => {
    cleanupCaches();
}, CACHE_CLEANUP_INTERVAL);

setInterval(() => {
    forceGarbageCollection();
    console.log(`Memory usage check - Heap used: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);
}, 604800000);

process.on('SIGINT', () => {
    console.log('Received SIGINT, cleaning up...');
    for (const timer of cooldownTimers.values()) {
        clearTimeout(timer);
    }
    for (const timer of warningTimers.values()) {
        clearTimeout(timer);
    }
    cooldowns.clear();
    cooldownTimers.clear();
    warningTimers.clear();
    messageCache.clear();
    channelCache.clear();
    console.log('Cleanup completed, exiting...');
    process.exit(0);
});

process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

client.on('messageCreate', (message) => {
    if (message.author.bot) return;
    if (message.content === '!help') {
        const embed = new EmbedBuilder()
            .setColor(0x9932cc)
            .setTitle('üìñ Shop Cooldown Bot')
            .setDescription('‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤')
            .addFields(
                { name: '/cooldown', value: '‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏£‡πâ‡∏≤‡∏ô', inline: true },
                { name: '/check_cooldown', value: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡∏£‡πâ‡∏≤‡∏ô', inline: true },
                { name: '/cancel_cooldown', value: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô', inline: true },
                { name: '/sync', value: '‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)', inline: true },
                { name: '/check_permissions', value: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ö‡∏≠‡∏ó', inline: true }
            )
            .setFooter({ text: '‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö Slash ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!' });
        message.reply({ embeds: [embed] });
    }
});

client.login(process.env.DISCORD_TOKEN);